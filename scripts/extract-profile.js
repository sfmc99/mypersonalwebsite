/*
  Script: scripts/extract-profile.js
  Purpose: Parse PDFs in content/uploads and generate src/content/profile.ts
*/

const fs = require("fs");
const path = require("path");
const pdf = require("pdf-parse");

const ROOT = path.resolve(__dirname, "..");
const UPLOADS_DIR = path.join(ROOT, "content", "uploads");
const OUTPUT_DIR = path.join(ROOT, "src", "content");
const OUTPUT_FILE = path.join(OUTPUT_DIR, "profile.ts");
const RESUME_SRC = path.join(UPLOADS_DIR, "Ankit_Bajpai_MarTechLeader.pdf");
const RESUME_DST = path.join(ROOT, "public", "Ankit_Bajpai_MarTechLeader.pdf");
const COVER_LETTER = path.join(UPLOADS_DIR, "Ankit_Bajpai_Cover_Letter.pdf");

function ensureDir(p) {
  if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true });
}

async function extractText(pdfPath) {
  if (!fs.existsSync(pdfPath)) return "";
  const dataBuffer = fs.readFileSync(pdfPath);
  const data = await pdf(dataBuffer).catch(() => ({ text: "" }));
  return (data.text || "").replace(/\r/g, "");
}

function buildBio(coverText) {
  const cleaned = coverText
    .split("\n")
    .map((l) => l.trim())
    .filter(Boolean);
  // Try to take the first meaningful paragraph of 1-3 lines
  let para = "";
  for (let i = 0; i < cleaned.length; i++) {
    para = cleaned[i];
    if (para.length > 60) break;
  }
  if (!para) para = cleaned.slice(0, 3).join(" ");
  if (!para) {
    para = "Marketing Technologist & Software Engineer specializing in CDPs, Marketing Automation, Analytics, and AI for Marketing.";
  }
  // Limit to ~500 chars
  return para.slice(0, 500);
}

function inferExperience(resumeText) {
  // Very light heuristic: seed with known roles if dates exist
  const exp = [];
  if (/2022/.test(resumeText)) {
    exp.push({
      role: "Marketing Technology Lead",
      company: "",
      start: "2022",
      end: "Present",
      bullets: [
        "Led CDP strategy and implementation across marketing stack.",
        "Built automation workflows and analytics pipelines.",
        "Drove AI-assisted personalization and lifecycle programs.",
      ],
    });
  }
  if (/2016/.test(resumeText)) {
    exp.push({
      role: "Software Engineer",
      company: "",
      start: "2016",
      end: /2022/.test(resumeText) ? "2022" : "",
      bullets: [
        "Developed data-driven systems enabling reporting and attribution.",
        "Built services integrating marketing data sources.",
      ],
    });
  }
  if (exp.length === 0) {
    exp.push({
      role: "Marketing Technologist & Software Engineer",
      company: "",
      start: "",
      end: "",
      bullets: [
        "Specializing in CDPs, Marketing Automation, Analytics, and AI for Marketing.",
      ],
    });
  }
  return exp;
}

function writeProfile({ bio, experience }) {
  ensureDir(OUTPUT_DIR);
  const contents = `// Auto-generated by scripts/extract-profile.js\n\nexport const profile = {\n  name: "Ankit Bajpai",\n  title: "Marketing Technologist & Software Engineer",\n  bio: ${JSON.stringify(bio)},\n  experience: ${JSON.stringify(experience, null, 2)},\n  resumeUrl: "/Ankit_Bajpai_MarTechLeader.pdf",\n} as const;\n`;
  fs.writeFileSync(OUTPUT_FILE, contents, "utf8");
}

async function main() {
  ensureDir(UPLOADS_DIR);
  ensureDir(path.join(ROOT, "public"));

  const [resumeText, coverText] = await Promise.all([
    extractText(RESUME_SRC),
    extractText(COVER_LETTER),
  ]);

  const bio = buildBio(coverText || resumeText);
  const experience = inferExperience(resumeText + "\n" + coverText);

  // Copy resume to public for download link
  if (fs.existsSync(RESUME_SRC)) {
    fs.copyFileSync(RESUME_SRC, RESUME_DST);
  }

  writeProfile({ bio, experience });
  console.log("Generated:", path.relative(ROOT, OUTPUT_FILE));
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
